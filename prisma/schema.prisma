generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model fitness_user {
  id            String                        @id @default(uuid())
  firstName     String                        @db.VarChar(256)
  lastName      String                        @db.VarChar(256)
  phoneNumber   String                        @unique @db.VarChar(256)
  totalScore    Int                           @db.Int
  workouts      fitness_workout_log[]
  suggestions   fitness_workout_suggestions[]
  comments      fitness_workout_comment[]
  likedWorkouts fitness_workout_likes[]
}

model fitness_workout_log {
  id             String                    @id @default(uuid())
  date           DateTime                  @db.DateTime
  description    String                    @db.LongText
  minutes        Int                       @db.Int
  score          Int                       @db.Int
  type           String                    @db.VarChar(256)
  totalLikes     Int                       @default(0) @db.Int
  user           fitness_user              @relation(fields: [fitness_userId], references: [id])
  image          fitness_workout_image?
  comments       fitness_workout_comment[]
  likes          fitness_workout_likes[]
  fitness_userId String
}

model fitness_workout_suggestions {
  id             String       @id @default(uuid())
  description    String       @db.LongText
  difficulty     String       @db.VarChar(100)
  type           String       @db.VarChar(256)
  user           fitness_user @relation(fields: [fitness_userId], references: [id])
  fitness_userId String
}

model fitness_workout_image {
  id                   String              @id @default(uuid())
  imageUrl             String              @db.VarChar(256)
  caption              String              @db.LongText
  workout              fitness_workout_log @relation(fields: [fitness_workoutLogId], references: [id])
  fitness_workoutLogId String
}

model fitness_workout_comment {
  id                   String              @id @default(uuid())
  comment              String?             @db.LongText
  workout              fitness_workout_log @relation(fields: [fitness_workoutLogId], references: [id])
  fitness_workoutLogId String
  user                 fitness_user        @relation(fields: [fitness_userId], references: [id])
  fitness_userId       String
}

model fitness_workout_likes {
  id                   String              @id @default(uuid())
  workout              fitness_workout_log @relation(fields: [fitness_workoutLogId], references: [id])
  fitness_workoutLogId String
  user                 fitness_user        @relation(fields: [fitness_userId], references: [id])
  fitness_userId       String
}
